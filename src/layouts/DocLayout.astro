---
import "katex/dist/katex.css"

import MainLayout, { Props as MainLayoutProps } from "./MainLayout.astro"
import { format } from "date-fns"
import esLocale from "date-fns/locale/es/index.js"

export interface Props {
  content: Omit<MainLayoutProps, "path"> & {
    createdAt: string
    updatedAt?: string
  }
}

const { createdAt, updatedAt, title, description, lang = "en" } = (Astro.props as Props).content

const formatDate = (date: string) => {
  // Removes the Z from 1900-01-01T00:00:00Z
  date = date.slice(0, -1)

  if (lang === "es")
    return format(new Date(createdAt.slice(0, -1)), "d 'de' MMMM 'de' yyyy", { locale: esLocale })
  else return format(new Date(createdAt.slice(0, -1)), "MMMM d, yyyy")
}

const headTitle = title + " (~/docs)"
---

<MainLayout title={headTitle} path={["docs"]} {description} {lang}>
  <Fragment slot="head">
    <meta property="og:type" content="article" />
    <meta property="og:article:published_time" content={createdAt} />
    {updatedAt && <meta property="og:article:modified_time" content={createdAt} />}
  </Fragment>

  <header class="mb-16">
    <h1 class="text-display font-black text-5xl">{title}</h1>
    {description && <p class="italic">{description}</p>}
    <p class="text-sm text-stone-700 dark:text-stone-400 mt-4">
      {lang === "es" ? (
        <>
          Publicado el: {formatDate(createdAt)}
          {updatedAt && (
            <>
              <br />
              Última actualización: {formatDate(updatedAt)}
            </>
          )}
        </>
      ) : (
        <>
          Published at: {formatDate(createdAt)}
          {updatedAt && (
            <>
              <br />
              Last modified: {formatDate(updatedAt)}
            </>
          )}
        </>
      )}
    </p>
  </header>

  <main class="prose prose-stone dark:prose-invert max-w-none overflow-x-auto">
    <slot />
  </main>

  <script>
    const graphs = document.getElementsByClassName("mermaid")
    if (document.getElementsByClassName("mermaid").length > 0) {
      const { default: mermaid } = await import("mermaid")
      mermaid.initialize({
        startOnLoad: false,
        fontFamily: "var(--sans-font)",
        // @ts-ignore This works, but TS expects a enum for some reason
        theme: window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "default",
      })

      for (const graph of graphs) {
        const content = graph.getAttribute("data-content")
        if(!content) continue;
        let svg = document.createElement("svg")
        const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000))
        graph.appendChild(svg)
        mermaid.render(id, content, (result: string) => {
          graph.innerHTML = result
        })
      }
    }
  </script>
</MainLayout>
